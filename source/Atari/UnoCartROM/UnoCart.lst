mads 2.0.6 build 58 (28 Jan 17)
Source: UnoCart.asm
     1 				/* Boot ROM for UnoCart
     2 				 * by Robin Edwards/Electrotrains@AtariAge
     3 				 * This file builds with WUDSN/MADS into an 8K Atari ROM
     4 				 * The 8k ROM should be converted into a C include file using:
     5 				 *  xxd -i UnoCart.ROM > rom.h
     6 				 */
     6
     7
     8 				/*
     9 				 Theory of Operation
    10 				 -------------------
    11 				 Atari sends command to mcu on cart by writing to $D5DF ($D5E0-$D5FF = SDX)
    12 				 (extra paramters for the command in $D500-$D5DE)
    13 				 Atari must be running from RAM when it sends a command, since the mcu on the cart will
    14 				 go away at that point.
    15 				 Atari polls $D500 until it reads $11. At this point it knows the mcu is back
    16 				 and it is safe to rts back to code in cartridge ROM again.
    17 				 Results of the command are in $D501-$D5DF
    18 				*/
    18
    19
    20 = 0000			CART_CMD_OPEN_ITEM = $0
    21 = 0001			CART_CMD_READ_CUR_DIR = $1
    22 = 0002			CART_CMD_GET_DIR_ENTRY = $2
    23 = 0003			CART_CMD_UP_DIR = $3
    24 = 0004			CART_CMD_ROOT_DIR = $4
    25 = 0005			CART_CMD_SEARCH = $5
    26 = 0010			CART_CMD_LOAD_SOFT_OS = $10
    27 = 0011			CART_CMD_SOFT_OS_CHUNK = $11
    28 = 00FE			CART_CMD_NO_CART = $FE
    29 = 00FF			CART_CMD_ACTIVATE_CART = $FF
    30
    31 = 0007			DIR_START_ROW = 7
    32 = 0015			DIR_END_ROW = 21
    33 = 000F			ITEMS_PER_PAGE = DIR_END_ROW-DIR_START_ROW+1
    34
    35 				;@com.wudsn.ide.asm.outputfileextension=.rom
    36
    37 				;CARTCS	= $bffa                    ;Start address vector, used if CARTFG has CARTFG_START_CART bit set
    38 				;CART	= $bffc                    ;Flag, must be zero for modules
    39 				;CARTFG	= $bffd                    ;Flags or-ed together, indicating how to start the module.
    40 				;CARTAD	= $bffe                    ;Initialization address vector
    41
    42 = 0080			CARTFG_DIAGNOSTIC_CART = $80       ;Flag value: Directly jump via CARTAD during RESET.
    43 = 0004			CARTFG_START_CART      = $04       ;Flag value: Jump via CARTAD and then via CARTCS.
    44 = 0001			CARTFG_BOOT            = $01       ;Flag value: Boot peripherals, then start the module.
    45
    46 = E477			COLDSV = $E477				; Coldstart (powerup) entry point
    47 = E474			WARMSV = $E474				; Warmstart entry point
    48 = 02FC			CH = $2FC				; Internal hardware value for the last key pressed
    49 = 0009			BOOT = $09
    50 = 0002			CASINI = $02
    51 = C000			OSROM = $C000
    52 = D301			PORTB = $D301
    53 = D400			DMACTL = $D400
    54 = D40E			NMIEN = $D40E
    55 = D407			PMBASE = $D407
    56 = 022F			SDMCTL = $22F
    57 = 026F			GPRIOR = $26F
    58 = 02C0			PCOLR0 = $2C0
    59 = 02C1			PCOLR1 = $2C1
    60 = 02C2			PCOLR2 = $2C2
    61 = 02C3			PCOLR3 = $2C3
    62 = 02C4			COLOR0 = $2C4
    63 = 02C5			COLOR1 = $2C5
    64 = 02C6			COLOR2 = $2C6
    65 = 02C7			COLOR3 = $2C7
    66 = 02C8			COLOR4 = $2C8
    67
    68 = D000			HPosP0	equ $D000
    69 = D001			HPosP1	equ $D001
    70 = D002			HPosP2	equ $D002
    71 = D003			HPosP3	equ $D003
    72 = D004			HPosM0	equ $D004
    73 = D005			HPosM1	equ $D005
    74 = D006			HPosM2	equ $D006
    75 = D007			HPosM3	equ $D007
    76 = D008			SizeP0	equ $D008
    77 = D009			SizeP1	equ $D009
    78 = D00A			SizeP2	equ $D00A
    79 = D00B			SizeP3	equ $D00B
    80 = D00C			SizeM	equ $D00C
    81 = D00D			GrafP0	equ $D00D
    82 = D00E			GrafP1	equ $D00E
    83 = D00F			GrafP2	equ $D00F
    84 = D010			GrafP3	equ $D010
    85 = D010			Trig0	equ $D010
    86 = D01D			GRACTL	equ $D01D
    87
    88 = 0058			sm_ptr = $58				; screen memory
    89 = 0600			search_string = $600
    90 = 0620			wait_for_cart = $620			; routine copied here
    91 = 0630			reboot_to_selected_cart = $630		; routine copied here
    92
    93 = 0800			PMBuffer = $800
    94 = 0A00			Player0Data = $A00
    95 = 0A80			Player1Data = $A80
    96 = 0B00			Player2Data = $B00
    97 = 0B80			Player3Data = $B80
    98
    99 				; ************************ VARIABLES ****************************
   100 = 0080			num_dir_entries = $80
   101 = 0081			dir_entry	= $81
   102 = 0082			ypos		= $82
   103 = 0083			cur_ypos	= $83
   104 = 0084			top_item	= $84
   105 = 0085			cur_item	= $85
   106 = 0086			search_text_len	= $86
   107 = 0087			search_results_mode = $87
   108 = 0090			tmp_ptr		= $90	// word
   109 = 0092			text_out_x	= $92	// word
   110 = 0094			text_out_y	= $94	// word
   111 = 0096			text_out_ptr	= $96	// word
   112 = 0098			text_out_len	= $98
   113 = 0099			cur_chunk	= $99
   114
   115 				; XEX loader stuff from Jon Halliday/FJC
   116 = 0700			LoaderAddress	equ $700
   117 = 0001			VER_MAJ		equ $01
   118 = 0002			VER_MIN		equ $02
   119 = 0043			FMSZPG		equ $43
   120 = 0042			Critic		equ $42
   121 = 0043			IOPtr		equ FMSZPG
   122 = 0045			FileSize	equ FMSZPG+2 ; .ds 4
   123 = 0043			ptr1		equ FMSZPG
   124 = 0045			ptr2		equ FMSZPG+2
   125 = 0047			ptr3		equ FMSZPG+4
   126 = 000C			DOSINI		equ $0C
   127 = 02E7			MEMLO		equ $02E7
   128 = 02E0			RunVec		equ $02E0
   129 = 02E2			IniVec		equ $02E2
   130 = D40B			VCOUNT		equ $D40B
   131 = D40A			WSYNC		equ $D40A
   132 = 03FA			GINTLK		equ $03FA
   133 = D013			TRIG3		equ $D013
   134 = 0230			SDLSTL		equ $230
   135 = E456			CIOV		equ $E456
   136
   137 				;	CIO Error Codes
   138 					.enum IOErr
   139 = 0081			AlreadyOpen	= 129
   140 = 0085			NotOpen		= 133
   141 = 0088			EOF		= 136
   142 = 008B			NAK		= 139
   143 = 0092			NoFunction	= 146
   144 = 00A5			BadName		= 165
   145 = 00AA			NotFound	= 170
   146 					.ende
   147 					
   148 					.struct IOCBlock
   149 = 0000			ID		.byte
   150 = 0001			DevNum		.byte
   151 = 0002			Command		.byte
   152 = 0003			Status		.byte
   153 = 0004			Address		.word
   154 = 0006			Put		.word	; put byte address
   155 = 0008			Len		.word
   156 = 000A			Aux1		.byte 	
   157 = 000B			Aux2		.byte
   158 = 000C			Aux3		.byte
   159 = 000D			Aux4		.byte
   160 = 000E			Aux5		.byte
   161 = 000F			Aux6		.byte
   162 					.ends
   163 					
   164 					org $0340
   165
   166 0340			IOCB	dta IOCBlock [8]
   167
   168 				;	CIO commands
   169
   170 					.enum IOCommand
   171 = 0003			Open	= $03
   172 = 0005			GetText	= $05
   173 = 0007			Read	= $07
   174 = 0009			PutText	= $09
   175 = 000B			Write	= $0B
   176 = 000C			Close	= $0C
   177 = 000D			Status	= $0D
   178 					.ende
   179 					
   180 				; ************************ CODE ****************************
   181
   182
   183 				        opt h-                     ;Disable Atari COM/XEX file headers
   184
   185 				        org $a000                  ;RD5 cartridge base
   186 				        opt f+                     ;Activate fill mode
   187
   188 				;Cartridge initalization
   189 				;Only the minimum of the OS initialization is complete, you don't want to code here normally.
   190 				init    .proc
   191 A000 60			        rts
   192 				        .endp ; proc init
   193 					
   194 				;Cartridge start
   195 				;RAM, graphics 0 and IOCB no for the editor (E:) are ready
   196 A001			start   .proc
   197 A001 A9 8F 8D C5 02		mva #$8F COLOR1
   198 A006 A9 82 8D C6 02		mva #$82 COLOR2
   199 					
   200 A00B A9 03 85 09			mva #3 BOOT ; patch reset - from mapping the atari (revised) appendix 11
   201 A00F A9 7D 85 02 A9 A2 + 	mwa #reset_routine CASINI
   202 					
   203 A017 20 53 A4		        jsr display_boot_screen
   204 A01A 20 21 A6			jsr copy_wait_for_cart
   205 A01D 20 38 A6			jsr copy_reboot_to_selected_cart
   206 A020 20 90 A3			jsr setup_pmg
   207 					
   208 				; read directory
   209 A023			read_current_directory
   210 A023 A9 00 85 87			mva #0 search_results_mode
   211 A027 A9 01			lda #CART_CMD_READ_CUR_DIR
   212 A029 20 20 06			jsr wait_for_cart
   213 A02C			check_read_dir
   214 A02C AD 01 D5			lda $D501
   215 A02F C9 01			cmp #1	; check for error flag
   216 A031 D0 06			bne read_dir_ok
   217 A033 20 87 A2			jsr display_error_msg_from_cart
   218 A036 4C 23 A0			jmp read_current_directory
   219 					
   220 A039			read_dir_ok
   221 A039 AD 02 D5			lda $D502
   222 A03C 85 80			sta num_dir_entries
   223 A03E A9 00 85 84			mva #0 top_item
   224 A042 A9 00 85 85			mva #0 cur_item
   225 					
   226 				; display_directory
   227 A046			display_directory
   228 A046 20 C2 A4			jsr output_header_text
   229 A049 20 3B A3			jsr clear_screen
   230 					
   231 A04C A5 80			lda num_dir_entries
   232 A04E D0 09			bne dir_ok
   233 					
   234 A050 20 ED A4		no_dir	jsr output_empty_dir_msg
   235 A053 20 09 A4			jsr hide_pmg_cursor
   236 A056 4C 5F A0			jmp main_loop
   237 					
   238 A059 20 DE A2		dir_ok	jsr output_directory
   239 A05C 20 70 A3			jsr draw_cursor
   240 					
   241 A05F			main_loop
   242 A05F 20 7E A3			jsr GetKey
   243 A062 F0 FB			beq main_loop
   244 A064 C9 1C			cmp #$1C ; cur up
   245 A066 F0 57			beq up_pressed
   246 A068 C9 2D			cmp #'-'
   247 A06A F0 53			beq up_pressed
   248 					
   249 A06C C9 1D			cmp #$1D ; cur down
   250 A06E F0 2A			beq down_pressed
   251 A070 C9 3D			cmp #'='
   252 A072 F0 26			beq down_pressed
   253 					
   254 A074 C9 62			cmp #'b'
   255 A076 D0 03			bne _1
   256 A078 4C 13 A1			jmp back_pressed
   257 A07B C9 1E		_1	cmp #$1E ; cur left
   258 A07D D0 03			bne _2 
   259 A07F 4C 13 A1			jmp back_pressed
   260
   261 A082 C9 9B		_2	cmp #$9B ; ret
   262 A084 D0 03			bne _3
   263 A086 4C DD A0			jmp return_pressed
   264
   265 A089 C9 78		_3	cmp #'x'
   266 A08B D0 03			bne _4
   267 A08D 4C 21 A1			jmp disable_pressed
   268
   269 A090 C9 1B		_4	cmp #$1B ; esc
   270 A092 D0 03			bne _5
   271 A094 4C 42 A1			jmp search_pressed
   272
   273 A097 4C 5F A0		_5	jmp main_loop
   274
   275 A09A			down_pressed
   276 A09A A5 85			lda cur_item
   277 A09C 18				clc
   278 A09D 69 01			adc #1
   279 A09F C5 80			cmp num_dir_entries
   280 A0A1 B0 BC			bcs main_loop
   281 				; single row down
   282 A0A3 E6 85			inc cur_item
   283 				; do we need to page down?
   284 A0A5 A5 85			lda cur_item
   285 A0A7 38				sec
   286 A0A8 E5 84			sbc top_item
   287 A0AA 18				clc	
   288 A0AB C9 0F			cmp #ITEMS_PER_PAGE
   289 A0AD F0 06			beq page_down
   290 A0AF 20 70 A3			jsr draw_cursor
   291 A0B2 4C 5F A0			jmp main_loop
   292 A0B5			page_down
   293 A0B5 A5 84			lda top_item
   294 A0B7 18				clc
   295 A0B8 69 0F			adc #ITEMS_PER_PAGE
   296 A0BA 85 84			sta top_item
   297 A0BC 4C 46 A0			jmp display_directory
   298
   299 A0BF			up_pressed
   300 A0BF A5 85			lda cur_item
   301 A0C1 C9 00			cmp #0
   302 A0C3 F0 9A			beq main_loop
   303 				; single row up
   304 A0C5 C6 85			dec cur_item
   305 				; do we need to page up
   306 A0C7 A5 85			lda cur_item
   307 A0C9 C5 84			cmp top_item
   308 A0CB 30 06			bmi page_up
   309 A0CD 20 70 A3			jsr draw_cursor
   310 A0D0 4C 5F A0			jmp main_loop
   311 A0D3			page_up
   312 A0D3 A5 84			lda top_item
   313 A0D5 38				sec
   314 A0D6 E9 0F			sbc #ITEMS_PER_PAGE
   315 A0D8 85 84			sta top_item
   316 A0DA 4C 46 A0			jmp display_directory
   317 					
   318 A0DD			return_pressed
   319 A0DD A5 80			lda num_dir_entries
   320 A0DF D0 03			bne return_pressed_ok	; check for empty dir
   321 A0E1 4C 5F A0			jmp main_loop
   322 A0E4			return_pressed_ok
   323 A0E4 A5 85			lda cur_item
   324 A0E6 8D 00 D5			sta $D500
   325 A0E9 A9 00			lda #CART_CMD_OPEN_ITEM
   326 A0EB 20 20 06			jsr wait_for_cart
   327
   328 A0EE AD 01 D5			lda $D501 ; look at return code from cart
   329 A0F1 C9 00			cmp #0
   330 A0F3 F0 12			beq directory_changed
   331 A0F5 C9 01			cmp #1
   332 A0F7 F0 11			beq file_loaded
   333 A0F9 C9 02			cmp #2
   334 A0FB F0 10			beq xex_loaded
   335 A0FD C9 03			cmp #3
   336 A0FF F0 0F			beq atr_loaded
   337 					; if we get here, there was an error
   338 A101 20 87 A2			jsr display_error_msg_from_cart
   339 A104 4C 23 A0			jmp read_current_directory
   340 A107			directory_changed
   341 A107 4C 23 A0			jmp read_current_directory
   342 A10A			file_loaded
   343 A10A 4C 30 06			jmp reboot_to_selected_cart
   344 A10D			xex_loaded
   345 A10D 4C 29 A1			jmp launch_xex
   346 A110			atr_loaded
   347 A110 4C 32 A1			jmp launch_atr
   348 						
   349 A113			back_pressed
   350 A113 A5 87			lda search_results_mode
   351 A115 C9 01			cmp #1
   352 A117 F0 05			beq exit_search_results
   353 A119 A9 03			lda #CART_CMD_UP_DIR
   354 A11B 20 20 06			jsr wait_for_cart
   355 A11E			exit_search_results
   356 A11E 4C 23 A0			jmp read_current_directory
   357 					
   358 A121			disable_pressed
   359 A121 A9 FE			lda #CART_CMD_NO_CART
   360 A123 20 20 06			jsr wait_for_cart
   361 A126 4C 30 06			jmp reboot_to_selected_cart
   362
   363 A129			launch_xex
   364 A129 20 DC A3			jsr disable_pmg
   365 A12C 20 55 A6			jsr copy_XEX_loader
   366 A12F 4C 03 07			jmp LoadBinaryFile
   367 					
   368 A132			launch_atr
   369 A132 20 DC A3			jsr disable_pmg
   370 A135 20 76 A1			jsr copy_soft_rom
   371 A138 C9 00			cmp #0
   372 A13A F0 03			beq reboot_atr
   373 A13C 4C 23 A0			jmp read_current_directory
   374 A13F			reboot_atr
   375 A13F 4C 30 06			jmp reboot_to_selected_cart
   376 						
   377 A142			search_pressed
   378 A142 20 1D A5			jsr output_search_box
   379 A145 20 03 A2			jsr get_search_string
   380 A148 A5 86			lda search_text_len
   381 A14A C9 00			cmp #0
   382 A14C D0 03			bne search
   383 A14E 4C 46 A0			jmp display_directory
   384 A151			search
   385 					; copy search_text_len bytes from search_text to $D5xx
   386 A151 A0 00			ldy #0
   387 A153 B9 00 06		@	lda search_string,y
   388 A156 99 00 D5			sta $D500,y
   389 A159 C8				iny
   390 A15A 98				tya
   391 A15B C5 86			cmp search_text_len
   392 A15D 90 F4			bcc @-
   393 					; null terminate
   394 A15F A9 00			lda #0
   395 A161 99 00 D5			sta $D500,y
   396 						
   397 A164 20 3B A3			jsr clear_screen
   398 A167 20 05 A5			jsr output_searching_msg
   399 						
   400 A16A A9 05			lda #CART_CMD_SEARCH
   401 A16C 20 20 06			jsr wait_for_cart
   402 A16F A9 01 85 87			mva #1 search_results_mode
   403 A173 4C 2C A0			jmp check_read_dir
   404 				        .endp ; proc start
   405
   406
   407 				; ************************ SUBROUTINES ****************************
   408 A176			.proc	copy_soft_rom
   409 A176 A9 10			lda #CART_CMD_LOAD_SOFT_OS
   410 A178 20 20 06			jsr wait_for_cart
   411 A17B AD 01 D5			lda $D501
   412 A17E C9 01			cmp #1	; check for error flag
   413 A180 D0 06			bne read_ok
   414 A182 20 87 A2			jsr display_error_msg_from_cart
   415 A185 A9 01			lda #1
   416 A187 60				rts
   417 A188			read_ok
   418 					; the following is from Appendix 12 of Mapping the Atari (revised), pg218
   419 A188 08			swap	php	; save processor status
   420 A189 78				sei	; disable irqs
   421 A18A AD 0E D4			lda NMIEN
   422 A18D 48				pha	; save NMIEN
   423 A18E A9 00			lda #0
   424 A190 8D 0E D4			sta NMIEN
   425 					; set colors
   426 A193 A9 B2 8D 17 D0		mva #$B2 $D017
   427 A198 A9 B2 8D 18 D0		mva #$B2 $D018
   428 					; switch ROM to RAM
   429 A19D AD 01 D3			LDA PORTB
   430 A1A0 29 FE			AND #$FE
   431 A1A2 8D 01 D3			STA PORTB
   432 					; copy
   433
   434 A1A5 A9 00 85 90 A9 C0 + 	mwa #OSROM tmp_ptr
   435 A1AD A9 00 85 99			mva #0 cur_chunk
   436 A1B1			copy_page
   437 A1B1 A5 91			lda tmp_ptr+1
   438 A1B3 C9 D0			cmp #$D0
   439 A1B5 D0 08			bne copy_first_half
   440 					; skip $D000-D800
   441 A1B7 A9 D8			lda #$D8
   442 A1B9 85 91			sta tmp_ptr+1
   443 A1BB A9 30			lda #$30
   444 A1BD 85 99			sta cur_chunk
   445 A1BF			copy_first_half
   446 A1BF A9 00			lda #$00
   447 A1C1 85 90			sta tmp_ptr
   448 					; fetch the first 128 bytes from the cartridge
   449 A1C3 A5 99			lda cur_chunk
   450 A1C5 8D 00 D5			sta $D500
   451 A1C8 A9 11			lda #CART_CMD_SOFT_OS_CHUNK
   452 A1CA 20 20 06			jsr wait_for_cart
   453 A1CD A0 00			ldy #0
   454 A1CF B9 01 D5		@	lda $D501,y
   455 A1D2 91 90			sta (tmp_ptr),y
   456 A1D4 C8				iny
   457 A1D5 C0 80			cpy #128
   458 A1D7 D0 F6			bne @-
   459 A1D9 E6 99			inc cur_chunk
   460 A1DB			copy_second_half
   461 A1DB A9 80			lda #$80
   462 A1DD 85 90			sta tmp_ptr
   463 					; fetch the next 128 bytes from the cartridge
   464 A1DF A5 99			lda cur_chunk
   465 A1E1 8D 00 D5			sta $D500
   466 A1E4 A9 11			lda #CART_CMD_SOFT_OS_CHUNK
   467 A1E6 20 20 06			jsr wait_for_cart
   468 A1E9 A0 00			ldy #0
   469 A1EB B9 01 D5		@	lda $D501,y
   470 A1EE 91 90			sta (tmp_ptr),y
   471 A1F0 C8				iny
   472 A1F1 C0 80			cpy #128
   473 A1F3 D0 F6			bne @-
   474 A1F5 E6 99			inc cur_chunk
   475 					; move to the next page
   476 A1F7 E6 91			inc tmp_ptr+1
   477 A1F9 D0 B6			bne copy_page
   478 					
   479 A1FB 68			enable	pla
   480 A1FC 8D 0E D4			sta NMIEN
   481 A1FF 28				plp
   482 A200 A9 00			lda #0
   483 A202 60				rts
   484 					.endp
   485 					
   486 A203			.proc   get_search_string
   487 A203 A9 00 85 86			mva #0 search_text_len
   488 A207 4C 48 A2			jmp output
   489 A20A			loop
   490 A20A 20 7E A3			jsr GetKey
   491 A20D F0 FB			beq loop
   492 A20F C9 1B			cmp #$1B ; esc
   493 A211 F0 65			beq cancel
   494 A213 C9 7E			cmp #$7E; del
   495 A215 F0 0D			beq delete
   496 A217 C9 9B			cmp #$9B ; ret
   497 A219 F0 61			beq done
   498 A21B A4 86			ldy search_text_len
   499 A21D C0 0E			cpy #14
   500 A21F F0 E9			beq loop
   501 A221 4C 41 A2			jmp newchar
   502 A224			delete	
   503 A224 A5 86			lda search_text_len
   504 A226 F0 E2			beq loop
   505 					; erase character
   506 A228 18				clc
   507 A229 69 10			adc #16
   508 A22B 85 92			sta text_out_x
   509 A22D A9 92 85 96 A9 A8 + 	mwa #cursor_text text_out_ptr
   510 A235 A9 01 85 98			mva #1 text_out_len
   511 A239 20 A0 A5			jsr output_text
   512 					
   513 A23C C6 86			dec search_text_len
   514 A23E 4C 48 A2			jmp output
   515 A241			newchar		
   516 A241 A4 86			ldy search_text_len
   517 A243 99 00 06			sta search_string,y
   518 A246 E6 86			inc search_text_len
   519 A248			output	
   520 A248 A9 10 85 92			mva #16 text_out_x
   521 A24C A9 09 85 94			mva #9 text_out_y
   522 A250 A9 00 85 96 A9 06 + 	mwa #search_string text_out_ptr
   523 A258 A5 86 85 98			mva search_text_len text_out_len
   524 A25C 20 A0 A5			jsr output_text
   525 					; draw cursor
   526 A25F A5 92			lda text_out_x
   527 A261 18				clc
   528 A262 65 98			adc text_out_len
   529 A264 85 92			sta text_out_x
   530 A266 A9 92 85 96 A9 A8 + 	mwa #cursor_text text_out_ptr
   531 A26E A9 01 85 98			mva #1 text_out_len
   532 A272 20 E2 A5			jsr output_text_inverted
   533 					
   534 A275 4C 0A A2			jmp loop
   535 A278 A9 00 85 86		cancel	mva #0 search_text_len
   536 A27C 60			done	rts
   537 					.endp
   538 A27D			.proc	reset_routine
   539 A27D A9 03 85 09			mva #3 BOOT
   540 A281 A9 04			lda #CART_CMD_ROOT_DIR ; tell the mcu we've done a reset
   541 A283 20 20 06			jsr wait_for_cart
   542 A286 60				rts
   543 					.endp
   544
   545 A287			.proc	display_error_msg_from_cart
   546 A287 20 09 A4			jsr hide_pmg_cursor
   547 A28A A9 01 85 92			mva #1 text_out_x
   548 A28E A9 08 85 94			mva #8 text_out_y
   549 A292 A9 AE 85 96 A9 A7 + 	mwa #error_text1 text_out_ptr
   550 A29A A9 26 85 98			mva #(.len error_text1) text_out_len
   551 A29E 20 6C A5			jsr output_text_internal
   552 A2A1 E6 94			inc text_out_y
   553 A2A3 A9 D4 85 96 A9 A7 + 	mwa #error_text2 text_out_ptr
   554 A2AB A9 26 85 98			mva #(.len error_text2) text_out_len
   555 A2AF 20 6C A5			jsr output_text_internal
   556 A2B2 E6 94			inc text_out_y
   557 A2B4 A9 FA 85 96 A9 A7 + 	mwa #error_text3 text_out_ptr
   558 A2BC A9 26 85 98			mva #(.len error_text3) text_out_len
   559 A2C0 20 6C A5			jsr output_text_internal
   560 					; display the actual errro
   561 A2C3 A9 08 85 92			mva #8 text_out_x
   562 A2C7 A9 09 85 94			mva #9 text_out_y
   563 A2CB A9 02 85 96 A9 D5 + 	mwa #$D502 text_out_ptr
   564 A2D3 A9 1E 85 98			mva #30 text_out_len
   565 A2D7 20 A0 A5			jsr output_text
   566 A2DA 20 5A A5			jsr wait_key
   567 A2DD 60				rts
   568 					.endp
   569 					
   570 A2DE			.proc	output_directory
   571 A2DE A5 84 85 81			mva top_item dir_entry
   572 A2E2 A9 07 85 82			mva #DIR_START_ROW ypos
   573 A2E6			next_entry
   574 A2E6 A4 82			ldy ypos
   575 A2E8 88				dey
   576 A2E9 98				tya
   577 A2EA C9 15			cmp #DIR_END_ROW
   578 A2EC F0 4C			beq end_of_page
   579 A2EE A5 81			lda dir_entry
   580 A2F0 C5 80			cmp num_dir_entries
   581 A2F2 F0 46			beq end_of_page
   582 A2F4 8D 00 D5			sta $D500
   583 A2F7 A9 02			lda #CART_CMD_GET_DIR_ENTRY ; request from mcu
   584 A2F9 20 20 06			jsr wait_for_cart
   585 					
   586 				; output the directory entry
   587 A2FC A5 82 85 94			mva ypos text_out_y
   588 A300 A9 04 85 92			mva #4 text_out_x
   589 A304 AE 01 D5			ldx $D501 ; 0 = file, 1 = folder
   590 A307 A9 02 85 96 A9 D5 + 	mwa #$D502 text_out_ptr
   591 				;	mwa #test_text text_out_ptr
   592 A30F A9 1F 85 98			mva #31 text_out_len
   593 A313 E0 01			cpx #1
   594 A315 F0 06			beq folder
   595 A317 20 A0 A5		file	jsr output_text
   596 A31A 4C 33 A3			jmp next
   597 A31D 20 A0 A5		folder	jsr output_text
   598 A320 A9 00 85 92			mva #0 text_out_x
   599 A324 A9 03 85 98			mva #3 text_out_len
   600 A328 A9 68 85 96 A9 A8 + 	mwa #folder_text text_out_ptr
   601 A330 20 E2 A5			jsr output_text_inverted
   602 A333 E6 82		next	inc ypos
   603 A335 E6 81			inc dir_entry
   604 A337 4C E6 A2			jmp next_entry
   605 A33A			end_of_page
   606 A33A 60				rts
   607 					.endp
   608
   609 				; clear screen
   610 A33B			clear_screen .proc
   611 A33B A5 58 85 90 A5 59 + 	mwa sm_ptr tmp_ptr
   612 A343 A0 07			ldy #DIR_START_ROW
   613 A345 88			@	dey
   614 A346 30 0E			bmi yend
   615 A348 18 A5 90 69 28 85 + 	adw tmp_ptr #40
   616 A353 4C 45 A3			jmp @-
   617 A356			yend
   618 A356 A2 0F			ldx #ITEMS_PER_PAGE	; number of lines to clear
   619 A358 A9 00		yloop	lda #0
   620 A35A A0 27			ldy #39
   621 A35C 91 90		xloop	sta (tmp_ptr),y
   622 A35E 88				dey
   623 A35F 10 FB			bpl xloop
   624 A361 18 A5 90 69 28 85 + 	adw tmp_ptr #40
   625 A36C CA				dex
   626 A36D D0 E9			bne yloop
   627 A36F 60				rts
   628 					.endp
   629
   630 A370			.proc 	draw_cursor
   631 A370 A5 85			lda cur_item
   632 A372 38				sec
   633 A373 E5 84			sbc top_item
   634 A375 18				clc
   635 A376 69 07			adc #DIR_START_ROW
   636 A378 85 83			sta cur_ypos
   637 A37A 20 15 A4			jsr draw_pmg_cursor
   638 A37D 60				rts
   639 					.endp
   640
   641 				;	Scan keyboard (returns N = 1 for no key pressed, else ASCII in A)
   642 A37E			.proc	GetKey
   643 A37E AE FC 02			ldx CH
   644 A381 E0 FF			cpx #$FF
   645 A383 F0 0A			beq NoKey
   646 A385 A9 FF 8D FC 02		mva #$FF CH		; set last key pressed to none
   647 A38A BD 99 A8			lda scancodes,x
   648 A38D C9 FF			cmp #$FF
   649 A38F			NoKey
   650 A38F 60				rts
   651 					.endp
   652 					
   653 A390			.proc	setup_pmg 
   654 A390 A9 08 8D 07 D4		mva #>PMBuffer PMBASE	
   655 A395 A9 2E 8D 2F 02		mva #$2E SDMCTL
   656 					
   657 A39A A9 03 8D 08 D0		mva #$3 SizeP0
   658 A39F A9 18 8D C0 02		mva #$18 PCOLR0
   659 A3A4 A9 40 8D 00 D0		mva #$40 HPosP0
   660 					
   661 A3A9 A9 03 8D 09 D0		mva #$3 SizeP1
   662 A3AE A9 18 8D C1 02		mva #$18 PCOLR1
   663 A3B3 A9 60 8D 01 D0		mva #$60 HPosP1
   664 					
   665 A3B8 A9 03 8D 0A D0		mva #$3 SizeP2
   666 A3BD A9 18 8D C2 02		mva #$18 PCOLR2
   667 A3C2 A9 80 8D 02 D0		mva #$80 HPosP2
   668 					
   669 A3C7 A9 03 8D 0B D0		mva #$3 SizeP3
   670 A3CC A9 18 8D C3 02		mva #$18 PCOLR3
   671 A3D1 A9 A0 8D 03 D0		mva #$A0 HPosP3
   672 					
   673 A3D6 A9 01 8D 6F 02		mva #$1 GPRIOR
   674 A3DB 60				rts
   675 					.endp
   676
   677 A3DC			.proc	disable_pmg
   678 A3DC A9 22 8D 2F 02		mva #34 SDMCTL
   679 A3E1 A9 00			lda #0
   680 A3E3 8D 1D D0			sta GRACTL
   681 A3E6 A0 0C			ldy #$0c
   682 A3E8			@
   683 A3E8 99 00 D0			sta $D000,y
   684 A3EB 88				dey
   685 A3EC 10 FA			bpl @-
   686 					
   687 A3EE A9 00 8D C0 02		mva #$0 PCOLR0
   688 A3F3 A9 00 8D C1 02		mva #$0 PCOLR1
   689 A3F8 A9 00 8D C2 02		mva #$0 PCOLR2
   690 A3FD A9 00 8D C3 02		mva #$0 PCOLR3
   691 					
   692 A402 A5 14 C5 14 F0 FC		lda:cmp:req 20	; wait vbl
   693 A408 60				rts
   694 					.endp
   695 					
   696 A409			.proc	hide_pmg_cursor
   697 A409 A5 14 C5 14 F0 FC		lda:cmp:req 20	; wait vbl
   698 A40F A9 00 8D 1D D0		mva #$0 GRACTL
   699 A414 60				rts
   700 					.endp
   701 					
   702 A415			.proc	draw_pmg_cursor
   703 A415 A5 14 C5 14 F0 FC		lda:cmp:req 20	; wait vbl
   704 A41B A9 03 8D 1D D0		mva #$3 GRACTL
   705 A420 A9 00			lda #0 ; clear pmg memory
   706 A422 A0 7F			ldy #127
   707 A424 99 00 0A		@	sta Player0Data,y
   708 A427 99 80 0A			sta Player1Data,y
   709 A42A 99 00 0B			sta Player2Data,y
   710 A42D 99 80 0B			sta Player3Data,y
   711 A430 88				dey
   712 A431 10 F1			bpl @-
   713
   714 A433 A9 0C			lda #$C ; offset row 0
   715 A435 A4 83			ldy cur_ypos
   716 A437 18				clc
   717 A438 69 04		@	adc #4	; skip character lines
   718 A43A 88				dey
   719 A43B 10 FB			bpl @-
   720 A43D A8				tay
   721 					
   722 A43E A9 FF			lda #$FF ; draw
   723 A440 A2 03			ldx #3
   724 A442 99 00 0A		@	sta Player0Data,y
   725 A445 99 80 0A			sta Player1Data,y
   726 A448 99 00 0B			sta Player2Data,y
   727 A44B 99 80 0B			sta Player3Data,y
   728 A44E C8				iny
   729 A44F CA				dex
   730 A450 10 F0			bpl @-
   731 A452 60				rts
   732 					.endp
   733
   734 A453			.proc	display_boot_screen
   735 A453 A9 00 85 92			mva #0 text_out_x
   736 A457 A9 00 85 94			mva #0 text_out_y
   737 A45B A9 96 85 96 A9 A6 + 	mwa #menu_text1 text_out_ptr
   738 A463 A9 28 85 98			mva #(.len menu_text1) text_out_len
   739 A467 20 6C A5			jsr output_text_internal
   740 A46A E6 94			inc text_out_y
   741 A46C A9 BE 85 96 A9 A6 + 	mwa #menu_text2 text_out_ptr
   742 A474 A9 28 85 98			mva #(.len menu_text2) text_out_len
   743 A478 20 6C A5			jsr output_text_internal
   744 A47B E6 94			inc text_out_y
   745 A47D A9 E6 85 96 A9 A6 + 	mwa #menu_text3 text_out_ptr
   746 A485 A9 28 85 98			mva #(.len menu_text3) text_out_len
   747 A489 20 6C A5			jsr output_text_internal
   748 A48C E6 94			inc text_out_y
   749 A48E A9 0E 85 96 A9 A7 + 	mwa #menu_text4 text_out_ptr
   750 A496 A9 28 85 98			mva #(.len menu_text4) text_out_len
   751 A49A 20 6C A5			jsr output_text_internal
   752 A49D E6 94			inc text_out_y
   753 A49F A9 36 85 96 A9 A7 + 	mwa #menu_text5 text_out_ptr
   754 A4A7 A9 28 85 98			mva #(.len menu_text5) text_out_len
   755 A4AB 20 6C A5			jsr output_text_internal
   756 A4AE A9 17 85 94			mva #23 text_out_y
   757 A4B2 A9 5E 85 96 A9 A7 + 	mwa #menu_text_bottom text_out_ptr
   758 A4BA A9 28 85 98			mva #(.len menu_text_bottom) text_out_len
   759 A4BE 20 E2 A5			jsr output_text_inverted
   760 A4C1 60				rts
   761 					.endp
   762
   763 A4C2			.proc	output_header_text
   764 A4C2 A9 09 85 92			mva #9 text_out_x
   765 A4C6 A9 05 85 94			mva #DIR_START_ROW-2 text_out_y
   766 A4CA A5 87			lda search_results_mode
   767 A4CC D0 0F			bne _2
   768 A4CE A9 86 85 96 A9 A7 + _1	mwa #directory_text text_out_ptr
   769 A4D6 A9 14 85 98			mva #(.len directory_text) text_out_len
   770 A4DA 4C E9 A4			jmp out
   771 A4DD A9 9A 85 96 A9 A7 + _2	mwa #search_results_text text_out_ptr
   772 A4E5 A9 14 85 98			mva #(.len search_results_text) text_out_len
   773 A4E9 20 E2 A5		out	jsr output_text_inverted
   774 A4EC 60				rts
   775 					.endp
   776
   777 A4ED			.proc	output_empty_dir_msg
   778 A4ED A9 06 85 92			mva #6 text_out_x
   779 A4F1 A9 08 85 94			mva #DIR_START_ROW+1 text_out_y
   780 A4F5 A9 6C 85 96 A9 A8 + 	mwa #empty_dir_text text_out_ptr
   781 A4FD A9 19 85 98			mva #(.len empty_dir_text) text_out_len
   782 A501 20 A0 A5			jsr output_text
   783 A504 60				rts
   784 					.endp
   785
   786 A505			.proc	output_searching_msg
   787 A505 A9 0C 85 92			mva #12 text_out_x
   788 A509 A9 09 85 94			mva #9 text_out_y
   789 A50D A9 85 85 96 A9 A8 + 	mwa #searching_text text_out_ptr
   790 A515 A9 0D 85 98			mva #(.len searching_text) text_out_len
   791 A519 20 A0 A5			jsr output_text
   792 A51C 60				rts
   793 					.endp
   794
   795 A51D			.proc	output_search_box
   796 A51D 20 09 A4			jsr hide_pmg_cursor
   797 A520 A9 08 85 92			mva #8 text_out_x
   798 A524 A9 08 85 94			mva #8 text_out_y
   799 A528 A9 20 85 96 A9 A8 + 	mwa #search_text1 text_out_ptr
   800 A530 A9 18 85 98			mva #(.len search_text1) text_out_len
   801 A534 20 6C A5			jsr output_text_internal
   802 A537 E6 94			inc text_out_y
   803 A539 A9 38 85 96 A9 A8 + 	mwa #search_text2 text_out_ptr
   804 A541 A9 18 85 98			mva #(.len search_text2) text_out_len
   805 A545 20 6C A5			jsr output_text_internal
   806 A548 E6 94			inc text_out_y
   807 A54A A9 50 85 96 A9 A8 + 	mwa #search_text3 text_out_ptr
   808 A552 A9 18 85 98			mva #(.len search_text3) text_out_len
   809 A556 20 6C A5			jsr output_text_internal
   810 A559 60				rts
   811 					.endp
   812
   813 					
   814 A55A			.proc	wait_key
   815 A55A A9 FF 8D FC 02		mva #$FF CH		; set last key pressed to none
   816 A55F AE FC 02		@	ldx CH
   817 A562 E0 FF			cpx #$FF
   818 A564 F0 F9			beq @-
   819 A566 A9 FF 8D FC 02		mva #$FF CH
   820 A56B 60				rts
   821 					.endp
   822
   823 				; output text in text_out_ptr at (cur_x, cur_y)
   824 A56C			.proc	output_text_internal
   825 A56C A5 58 85 90 A5 59 + 	mwa sm_ptr tmp_ptr
   826 				; add the cursor y offset
   827 A574 A4 94			ldy text_out_y
   828 A576 88			yloop	dey
   829 A577 30 0E			bmi yend
   830 A579 18 A5 90 69 28 85 + 	adw tmp_ptr #40
   831 A584 4C 76 A5			jmp yloop
   832 A587 18 A5 92 65 90 85 + yend	adw text_out_x tmp_ptr tmp_ptr ; add the cursor x offset
   833 				; text output loop
   834 A594 A0 00			ldy #0
   835 A596			nextchar ; text output loop
   836 A596 B1 96			lda (text_out_ptr),y
   837 A598 91 90			sta (tmp_ptr),y
   838 A59A C8				iny
   839 A59B C4 98			cpy text_out_len
   840 A59D D0 F7			bne nextchar
   841 A59F			endoftext	
   842 A59F 60				rts
   843 					.endp
   844
   845 				; output text in text_out_ptr at (cur_x, cur_y)
   846 A5A0			.proc	output_text
   847 A5A0 A5 98			lda text_out_len
   848 A5A2 D0 01			bne ok
   849 A5A4 60				rts
   850 A5A5 A5 58 85 90 A5 59 + ok	mwa sm_ptr tmp_ptr
   851 				; add the cursor y offset
   852 A5AD A4 94			ldy text_out_y
   853 A5AF 88			yloop	dey
   854 A5B0 30 0E			bmi yend
   855 A5B2 18 A5 90 69 28 85 + 	adw tmp_ptr #40
   856 A5BD 4C AF A5			jmp yloop
   857 A5C0 18 A5 92 65 90 85 + yend	adw text_out_x tmp_ptr tmp_ptr ; add the cursor x offset
   858 				; text output loop
   859 A5CD A0 00			ldy #0
   860 A5CF			nextchar ; text output loop
   861 A5CF B1 96			lda (text_out_ptr),y
   862 A5D1 F0 0E			beq endoftext ; end of line?
   863 A5D3 C9 60			cmp #96; convert ascii->internal
   864 A5D5 B0 03			bcs lower
   865 A5D7 38				sec
   866 A5D8 E9 20			sbc #32
   867 A5DA 91 90		lower	sta (tmp_ptr),y
   868 A5DC C8				iny
   869 A5DD C4 98			cpy text_out_len
   870 A5DF D0 EE			bne nextchar
   871 A5E1			endoftext	
   872 A5E1 60				rts
   873 					.endp
   874
   875 				; output text in text_out_ptr at (cur_x, cur_y)
   876 A5E2			output_text_inverted .proc 
   877 A5E2 A5 58 85 90 A5 59 + 	mwa sm_ptr tmp_ptr
   878 				; add the cursor y offset
   879 A5EA A4 94			ldy text_out_y
   880 A5EC 88			yloop	dey
   881 A5ED 30 0E			bmi yend
   882 A5EF 18 A5 90 69 28 85 + 	adw tmp_ptr #40
   883 A5FA 4C EC A5			jmp yloop
   884 A5FD 18 A5 92 65 90 85 + yend	adw text_out_x tmp_ptr tmp_ptr ; add the cursor x offset
   885 				; text output loop
   886 A60A A0 00			ldy #0
   887 A60C			nextchar ; text output loop
   888 A60C B1 96			lda (text_out_ptr),y
   889 A60E F0 10			beq endoftext ; end of line?
   890 A610 C9 60			cmp #96; convert ascii->internal
   891 A612 B0 03			bcs lower
   892 A614 38				sec
   893 A615 E9 20			sbc #32
   894 A617 09 80		lower	ora #$80
   895 A619 91 90			sta (tmp_ptr),y
   896 A61B C8				iny
   897 A61C C4 98			cpy text_out_len
   898 A61E D0 EC			bne nextchar
   899 A620			endoftext	
   900 A620 60				rts
   901 					.endp
   902
   903 A621			.proc	copy_wait_for_cart
   904 A621 A0 0B			ldy #.len[WaitForCartCode]
   905 A623			@
   906 A623 B9 2C A6			lda WaitForCartCode-1,y
   907 A626 99 1F 06			sta wait_for_cart-1,y
   908 A629 88				dey
   909 A62A D0 F7			bne @-
   910 A62C 60				rts
   911 					.endp
   912 					
   913 				; cmd is in Accumulator
   914 A62D			.proc WaitForCartCode
   915 A62D 8D DF D5			sta $D5DF	; send cmd to the cart
   916 A630 AD 00 D5		@	lda $D500
   917 A633 C9 11			cmp #$11	; wait for the cart to signal it's back
   918 A635 D0 F9			bne @-
   919 A637 60				rts
   920 					.endp
   921
   922 A638			.proc	copy_reboot_to_selected_cart
   923 A638 A0 11			ldy #.len[RebootToSelectedCartCode]
   924 A63A			@
   925 A63A B9 43 A6			lda RebootToSelectedCartCode-1,y
   926 A63D 99 2F 06			sta reboot_to_selected_cart-1,y
   927 A640 88				dey
   928 A641 D0 F7			bne @-
   929 A643 60				rts
   930 					.endp
   931 					
   932 A644			.proc RebootToSelectedCartCode
   933 A644 78				sei				; prevent GINTLK check in deferred vbi
   934 A645 A9 00			lda #0
   935 A647 8D 2F 02			sta SDMCTL
   936 A64A 8D 00 D4			sta DMACTL
   937 A64D A9 FF			lda #CART_CMD_ACTIVATE_CART	; tell the cart we're ready for it switch ROM
   938 A64F 8D DF D5			sta $D5DF
   939 A652 4C 77 E4			jmp COLDSV
   940 					.endp
   941
   942 				; ************************ XEX LOADER ****************************
   943
   944 A655			.proc copy_XEX_loader
   945 A655 A9 99 85 43 A9 A9 + 	mwa #LoaderCodeStart ptr1
   946 A65D A9 00 85 45 A9 07 + 	mwa #LoaderAddress ptr2
   947 A665 A9 FF 85 47 A9 01 + 	mwa #[EndLoaderCode-LoaderCode] ptr3
   948 A66D 4C 70 A6			jmp UMove
   949 					.endp
   950 					
   951 				; Move bytes from ptr1 to ptr2, length ptr3
   952 A670			.proc UMove
   953 A670 A5 47			lda ptr3
   954 A672 49 FF			eor #$FF
   955 A674 69 01			adc #1
   956 A676 85 47			sta ptr3
   957 A678 A5 48			lda ptr3+1
   958 A67A 49 FF			eor #$FF
   959 A67C 69 00			adc #0
   960 A67E 85 48			sta ptr3+1
   961 					
   962 A680 A0 00			ldy #0
   963 A682			Loop
   964 A682 B1 43			lda (ptr1),y
   965 A684 91 45			sta (ptr2),y
   966 A686 C8				iny
   967 A687 D0 04			bne @+
   968 A689 E6 44			inc ptr1+1
   969 A68B E6 46			inc ptr2+1
   970 A68D			@
   971 A68D E6 47			inc ptr3
   972 A68F D0 F1			bne Loop
   973 A691 E6 48			inc ptr3+1
   974 A693 D0 ED			bne Loop
   975 A695 60				rts
   976 					.endp
   977
   978
   979 				; ************************ DATA ****************************
   980 A696				.local menu_text1
   981 A696 51 52 52 52 52 52 + 	.byte 81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,87,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,69
   982 					.endl
   983 A6BE				.local menu_text2
   984 A6BE 7C 80 00 80 00 80 + 	.byte 124,128,0,128,0,128,128,74,0,128,128,74," CART",124,"  ROM/CAR/XEX<=128k  ",124
   985 					.endl
   986 A6E6				.local menu_text3
   987 A6E6 7C 80 00 80 00 80 + 	.byte 124,128,0,128,0,128,0,128,0,128,0,128,81,82,82,82,82,88,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,68
   988 					.endl
   989 A70E				.local menu_text4
   990 A70E 7C CA 80 80 00 80 + 	.byte 124,202,128,128,0,128,0,128,0,202,128,128,124,"v1.3 Electrotrains/FJC '17", 124
   991 					.endl
   992 A736				.local menu_text5
   993 A736 5A 52 52 52 52 52 + 	.byte 90,82,82,82,82,82,82,82,82,82,82,82,88,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,67
   994 					.endl
   995 A75E				.local menu_text_bottom
   996 A75E 43 75 72 55 70 2F + 	.byte 'CurUp/Dn/Retn=Sel B=Back X=Boot Esc=Find'
   997 					.endl
   998 A786				.local directory_text
   999 A786 5B 44 69 72 65 63 + 	.byte '[Directory contents]'
  1000 					.endl
  1001 A79A				.local search_results_text
  1002 A79A 5B 20 20 53 65 61 + 	.byte '[  Search results  ]'
  1003 					.endl
  1004 					
  1005 A7AE				.local error_text1
  1006 A7AE 51 52 52 52 52 52 + 	.byte 81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,69
  1007 					.endl
  1008 A7D4				.local error_text2
  1009 A7D4 7C 25 72 72 6F 72 + 	.byte 124,"Error:",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124
  1010 					.endl
  1011 A7FA				.local error_text3
  1012 A7FA 5A 52 52 52 52 52 + 	.byte 90,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,"P"+$80,"r"+$80,"e"+$80,"s"+$80,"s"+$80," "+$80,"a"+$80," "+$80,"k"+$80,"e"+$80,"y"+$80,67
  1013 					.endl
  1014 					
  1015 A820				.local search_text1
  1016 A820 51 52 52 52 52 52 + 	.byte 81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,69
  1017 					.endl
  1018 A838				.local search_text2
  1019 A838 7C 33 65 61 72 63 + 	.byte 124,"Search:",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124
  1020 					.endl
  1021 A850				.local search_text3
  1022 A850 5A 52 52 52 52 52 + 	.byte 90,82,82,82,82,82,82,82,82,82,82,82,82,"E"+$80,"S"+$80,"C"+$80," "+$80,"C"+$80,"a"+$80,"n"+$80,"c"+$80,"e"+$80,"l"+$80,67
  1023 					.endl
  1024 					
  1025 A868				.local folder_text
  1026 A868 44 49 52 00			.byte 'DIR',0
  1027 					.endl
  1028 					
  1029 A86C				.local empty_dir_text
  1030 A86C 4E 6F 20 76 61 6C + 	.byte 'No valid files to display'
  1031 					.endl
  1032 					
  1033 A885				.local searching_text
  1034 A885 53 65 61 72 63 68 + 	.byte 'Searching....'
  1035 					.endl
  1036 					
  1037 A892				.local cursor_text
  1038 A892 20				.byte ' '
  1039 					.endl
  1040 					
  1041 A893				.local test_text
  1042 A893 48 65 6C 6C 6F 00		.byte 'Hello',0
  1043 					.endl
  1044 A899			scancodes
  1045 A899 6C 6A 3B 8A 8B 6B + 	ins 'keytable.bin'
  1046 					
  1047 					
  1048 A999			LoaderCodeStart
  1049
  1050 					opt f-
  1051 A999				org LoaderAddress
  1052 					opt f+
  1053 					
  1054 0700			LoaderCode
  1055 0700 4C				.byte 'L'
  1056 0701 01				.byte VER_MAJ
  1057 0702 02				.byte VER_MIN
  1058
  1059 0703				.proc LoadBinaryFile
  1060 0703 20 3B 08			jsr InitLoader
  1061 0706			Loop
  1062 0706 A9 38 8D E2 02 A9 + 	mwa #Return IniVec	; reset init vector
  1063 0710 20 3C 07			jsr ReadBlock
  1064 0713 30 20			bmi Error
  1065 0715 AD E1 02 C9 07 D0 + 	cpw RunVec #Return
  1066 0721 D0 0C			bne @+
  1067 0723 AD 37 08 8D E0 02 + 	mwa BStart RunVec	; set run address to start of first block
  1068 072F			@
  1069 072F 20 39 07			jsr DoInit
  1070 0732 4C 06 07			jmp Loop
  1071 0735			Error
  1072 0735 6C E0 02			jmp (RunVec)
  1073 0738			Return
  1074 0738 60				rts
  1075 					.endp
  1076 					
  1077 					
  1078 				//
  1079 				//	Jump through init vector
  1080 				//
  1081 					
  1082 0739				.proc DoInit
  1083 0739 6C E2 02			jmp (IniVec)
  1084 					.endp
  1085
  1086
  1087 				//
  1088 				//	Read block from executable
  1089 				//
  1090
  1091 073C				.proc ReadBlock
  1092 073C 20 8A 07			jsr ReadWord
  1093 073F 30 48			bmi Error
  1094 0741 AD 35 08			lda HeaderBuf
  1095 0744 2D 36 08			and HeaderBuf+1
  1096 0747 C9 FF			cmp #$ff
  1097 0749 D0 05			bne NoSignature
  1098 074B 20 8A 07			jsr ReadWord
  1099 074E 30 39			bmi Error
  1100 0750			NoSignature
  1101 0750 AD 35 08 8D 37 08 + 	mwa HeaderBuf BStart
  1102 075C 20 8A 07			jsr ReadWord
  1103 075F 30 28			bmi Error
  1104 0761 38 AD 35 08 ED 37 + 	sbw HeaderBuf BStart BLen
  1105 0774 EE 39 08 D0 03 EE + 	inw BLen
  1106 077C AD 37 08 85 43 AD + 	mwa BStart IOPtr
  1107 0786 20 9C 07			jsr ReadBuffer
  1108 0789			Error
  1109 0789 60				rts
  1110 					.endp
  1111 					
  1112 					
  1113 					
  1114 					
  1115 				//
  1116 				//	Read word from XEX
  1117 				//
  1118
  1119 078A				.proc ReadWord
  1120 078A A9 35 85 43 A9 08 + 	mwa #HeaderBuf IOPtr
  1121 0792 A9 02 8D 39 08 A9 + 	mwa #2 BLen		; fall into ReadBuffer
  1122 					.endp
  1123
  1124
  1125
  1126 				//
  1127 				//	Read buffer from XEX
  1128 				//	Returns Z=1 on EOF
  1129 				//
  1130 					
  1131 079C				.proc ReadBuffer
  1132 079C 20 22 08			jsr SetSegment
  1133 079F			Loop
  1134 079F AD 39 08			lda BLen
  1135 07A2 0D 3A 08			ora BLen+1
  1136 07A5 F0 75			beq Done
  1137 					
  1138 07A7 A5 45			lda FileSize		; first ensure we're not at the end of the file
  1139 07A9 05 46			ora FileSize+1
  1140 07AB 05 47			ora FileSize+2
  1141 07AD 05 48			ora FileSize+3
  1142 07AF F0 6E			beq EOF
  1143
  1144 07B1 EE F3 07			inc BufIndex
  1145 07B4 D0 3C			bne NoBurst			; don't burst unless we're at the end of the buffer
  1146 					
  1147 07B6			BurstLoop
  1148 07B6 EE 23 08			inc SegmentLo			; bump segment if we reached end of buffer
  1149 07B9 D0 03			bne @+
  1150 07BB EE 25 08			inc SegmentHi
  1151 07BE			@
  1152 07BE 20 22 08			jsr SetSegment
  1153
  1154 07C1 AD 3A 08			lda Blen+1		; see if we can burst read the next 256 bytes
  1155 07C4 F0 2C			beq NoBurst
  1156 07C6 A5 46			lda FileSize+1	; ensure buffer and remaining bytes in file are both >= 256
  1157 07C8 05 47			ora FileSize+2
  1158 07CA 05 48			ora FileSize+3
  1159 07CC F0 24			beq NoBurst
  1160
  1161 07CE A0 00			ldy #0			; read a whole page into RAM
  1162 07D0			@
  1163 07D0 B9 00 D5			lda $D500,y		; doesn't matter about speculative reads (?)
  1164 07D3 91 43			sta (IOPtr),y
  1165 07D5 C8				iny
  1166 07D6 D0 F8			bne @-
  1167 07D8 E6 44			inc IOPtr+1		; bump address for next time
  1168
  1169 07DA A2 03			ldx #3			; y is already 0
  1170 07DC 38				sec
  1171 07DD			@
  1172 07DD B9 45 00			lda FileSize,y	; reduce file size by 256
  1173 07E0 F9 31 08			sbc L256,y
  1174 07E3 99 45 00			sta FileSize,y
  1175 07E6 C8				iny
  1176 07E7 CA				dex
  1177 07E8 10 F3			bpl @-
  1178 07EA CE 3A 08			dec Blen+1		; reduce buffer length by 256
  1179 07ED CE F3 07			dec BufIndex
  1180 07F0 D0 AA			bne ReadBuffer
  1181
  1182 07F2			NoBurst
  1183 07F2 AD 00 D5			lda $D500
  1184 = 07F3			BufIndex	equ *-2
  1185 07F5 A0 00			ldy #0
  1186 07F7 91 43			sta (IOPtr),y
  1187 07F9 E6 43 D0 02 E6 44		inw IOPtr
  1188 07FF AD 39 08 D0 03 CE + 	dew BLen
  1189 					
  1190 080A A2 03			ldx #3		; y is already 0
  1191 080C 38				sec
  1192 080D			@
  1193 080D B9 45 00			lda FileSize,y
  1194 0810 F9 2D 08			sbc L1,y
  1195 0813 99 45 00			sta FileSize,y
  1196 0816 C8				iny
  1197 0817 CA				dex
  1198 0818 10 F3			bpl @-
  1199 081A 30 83			bmi Loop
  1200 					
  1201 081C			Done
  1202 081C A0 01			ldy #1
  1203 081E 60				rts
  1204 081F			EOF
  1205 081F A0 88			ldy #IOErr.EOF
  1206 0821 60				rts
  1207 					
  1208 0822			SetSegment
  1209 0822 A0 00			ldy #0
  1210 = 0823			SegmentLo equ *-1
  1211 0824 A2 00			ldx #0
  1212 = 0825			SegmentHi equ *-1
  1213 0826 8C 00 D5			sty $D500
  1214 0829 8E 01 D5			stx $D501
  1215 082C 60				rts
  1216 082D			L1
  1217 082D 01 00 00 00			.dword 1
  1218 0831			L256
  1219 0831 00 01 00 00			.dword 256
  1220 					.endp
  1221
  1222
  1223 0835 00 00		HeaderBuf	.word 0
  1224 0837 00 00		BStart		.word 0
  1225 0839 00 00		BLen		.word 0
  1226
  1227
  1228
  1229 				; Everything beyond here can be obliterated safely during the load
  1230 					
  1231 				//
  1232 				//	Loader initialisation
  1233 				//
  1234 					
  1235 083B				.proc InitLoader
  1236 083B 78				sei
  1237 083C A9 FF			lda #CART_CMD_ACTIVATE_CART
  1238 083E 8D DF D5			sta $D5DF
  1239
  1240 0841 20 8E 08			jsr SetGintlk
  1241 0844 20 7C 08			jsr BasicOff
  1242 0847 58				cli
  1243 0848 20 D6 08			jsr OpenEditor
  1244 084B A9 FF 8D E7 02 A9 + 	mwa #EndLoaderCode MEMLO
  1245 0855 A9 38 8D E0 02 A9 + 	mwa #LoadBinaryFile.Return RunVec	; reset run vector
  1246 085F A0 00			ldy #0
  1247 0861 98				tya
  1248 0862			@
  1249 0862 99 80 00			sta $80,y
  1250 0865 C8				iny
  1251 0866 10 FA			bpl @-
  1252 0868 20 9B 08			jsr ClearRAM
  1253 					
  1254 086B A0 03			ldy #3
  1255 086D			@
  1256 086D B9 00 D5			lda $D500,y
  1257 0870 99 45 00			sta FileSize,y
  1258 0873 88				dey
  1259 0874 10 F7			bpl @-
  1260 0876 A9 03 8D F3 07		mva #3 ReadBuffer.BufIndex
  1261 087B 60				rts
  1262 					.endp
  1263
  1264 					
  1265 					
  1266 087C				.proc BASICOff
  1267 087C A9 01 8D F8 03		mva #$01 $3f8
  1268 0881 A9 C0 85 6A			mva #$C0 $6A
  1269 0885 AD 01 D3			lda portb
  1270 0888 09 02			ora #$02
  1271 088A 8D 01 D3			sta portb
  1272 088D 60				rts
  1273 					.endp
  1274 					
  1275 					
  1276
  1277 088E				.proc SetGintlk
  1278 088E 8D 0A D4			sta WSYNC
  1279 0891 8D 0A D4			sta WSYNC
  1280 0894 AD 13 D0			lda TRIG3
  1281 0897 8D FA 03			sta GINTLK
  1282 089A 60				rts
  1283 					.endp
  1284 					
  1285 					
  1286 					
  1287 089B				.proc ClearRAM
  1288 089B A9 FF 85 43 A9 08 + 	mwa #EndLoaderCode ptr1
  1289 				;	sbw $c000 ptr1 ptr2
  1290 08A3 38 AD 30 02 E5 43 + 	sbw SDLSTL ptr1 ptr2		; clear up to display list address
  1291 					
  1292 08B2 A5 45			lda ptr2
  1293 08B4 49 FF			eor #$FF
  1294 08B6 18				clc
  1295 08B7 69 01			adc #1
  1296 08B9 85 45			sta ptr2
  1297 08BB A5 46			lda ptr2+1
  1298 08BD 49 FF			eor #$FF
  1299 08BF 69 00			adc #0
  1300 08C1 85 46			sta ptr2+1
  1301 08C3 A0 00			ldy #0
  1302 08C5 98				tya
  1303 08C6			Loop
  1304 08C6 91 43			sta (ptr1),y
  1305 08C8 C8				iny
  1306 08C9 D0 02			bne @+
  1307 08CB E6 44			inc ptr1+1
  1308 08CD			@
  1309 08CD E6 45			inc ptr2
  1310 08CF D0 F5			bne Loop
  1311 08D1 E6 46			inc ptr2+1
  1312 08D3 D0 F1			bne Loop
  1313 08D5 60				rts
  1314 					.endp
  1315 					
  1316 					
  1317 					
  1318 08D6				.proc OpenEditor
  1319 08D6 A2 00			ldx #0
  1320 08D8 A9 0C			lda #$0c
  1321 08DA 8D 42 03			sta iocb[0].Command
  1322 08DD 20 56 E4			jsr ciov
  1323 08E0 A9 FC 8D 44 03 A9 + 	mwa #EName iocb[0].Address
  1324 08EA A9 0C 8D 4A 03		mva #$0C iocb[0].Aux1
  1325 08EF A9 00 8D 4B 03		mva #$00 iocb[0].Aux2
  1326 08F4 A9 03 8D 42 03		mva #$03 iocb[0].Command
  1327 08F9 4C 56 E4			jmp ciov
  1328
  1329 08FC			EName
  1330 08FC 45 3A 9B			.byte 'E:',$9B
  1331
  1332 					.endp
  1333 					
  1334
  1335
  1336 					.if 0
  1337 				//
  1338 				//	Wait for sync
  1339 				//
  1340
  1341 					.proc WaitForSync2
  1342 					lda VCount
  1343 					rne
  1344 					lda VCount
  1345 					req
  1346 					rts
  1347 					.endp
  1348 					
  1349 					.endif
  1350 					
  1351
  1352 					
  1353
  1354 08FF			EndLoaderCode ; end of relocated code
  1355
  1356 = 01FF			LoaderCodeSize	= EndLoaderCode-LoaderCode
  1357 					
  1358 					opt f-
  1359 08FF				org LoaderCodeStart + LoaderCodeSize
  1360 					opt f+
  1361 					
  1362
  1363 				; ************************ CARTRIDGE CONTROL BLOCK *****************
  1364
  1365 AB98			        org $bffa                 ;Cartridge control block
  1366 BFFA 01 A0		        .word start               ;CARTCS
  1367 BFFC 00			        .byte 0                   ;CART
  1368 BFFD 04			        .byte CARTFG_START_CART   ;CARTFG
  1369 BFFE 00 A0		        .word init                ;CARTAD
  1370
