mads 2.0.6 build 58 (28 Jan 17)
Source: GameBoyRT.asm
     1 				/* Gameboy Demo ROM for use with UnoCart
     2 				 * by Mark Keates/Wrathchild@AtariAge
     3 				 * This file builds with WUDSN/MADS into an 8K Atari ROM
     4 				 * The 8k ROM is loaded with the GameBoy/VRAM from R-Type:
     5 				 */
     5
     6
     7 = 0030			CART_CMD_REFRESH_SCREEN = $30
     8 = 0031			CART_CMD_INIT_VRAM = $31
     9
    10 = 9C00			GAMEBOY_FONT = $9C00
    11 = 9E00			GAMEBOY_OAM = $9E00
    12 = 9F40			GAMEBOY_REGS = $9F40
    13
    14 = 9F40			LCDCONT = $9F40
    15 = 9F41			LCDSTAT = $9F41
    16 = 9F42			SCROLLY = $9F42
    17 = 9F43			SCROLLX = $9F43
    18 = 9F44			CURLINE = $9F44
    19 = 9F45			CMPLINE = $9F45
    20 = 9F46			DMACONT = $9F46
    21 = 9F47			BGRDPAL = $9F47
    22 = 9F48			OBJ0PAL = $9F48
    23 = 9F49			OBJ1PAL = $9F49
    24 = 9F4A			WNDPOSY = $9F4A
    25 = 9F4B			WNDPOSX = $9F4B
    26
    27 				;@com.wudsn.ide.asm.outputfileextension=.rom
    28
    29 = 0080			CARTFG_DIAGNOSTIC_CART = $80       ;Flag value: Directly jump via CARTAD during RESET.
    30 = 0004			CARTFG_START_CART      = $04       ;Flag value: Jump via CARTAD and then via CARTCS.
    31 = 0001			CARTFG_BOOT            = $01       ;Flag value: Boot peripherals, then start the module.
    32
    33 = E45C			SETVBV = $E45C
    34 = E462			XITVBV = $E462
    35 = E477			COLDSV = $E477				; Coldstart (powerup) entry point
    36 = E474			WARMSV = $E474				; Warmstart entry point
    37
    38 = D01A			COLBAK = $D01A
    39 = D01F			CONSOL = $D01F
    40 = D301			PORTB = $D301
    41 = D400			DMACTL = $D400
    42 = D404			HSCROL = $D404
    43 = D407			PMBASE = $D407
    44 = D40E			NMIEN = $D40E
    45
    46 = 022F			SDMCTL = $22F
    47 = 026F			GPRIOR = $26F
    48 = 02C0			PCOLR0 = $2C0
    49 = 02C1			PCOLR1 = $2C1
    50 = 02C2			PCOLR2 = $2C2
    51 = 02C3			PCOLR3 = $2C3
    52 = 02C4			COLOR0 = $2C4
    53 = 02C5			COLOR1 = $2C5
    54 = 02C6			COLOR2 = $2C6
    55 = 02C7			COLOR3 = $2C7
    56 = 02C8			COLOR4 = $2C8
    57 = 02F4			CHBAS = $2F4
    58
    59 				; ************************ VARIABLES ****************************
    60
    61 = 000C			DOSINI		equ $0C
    62 = 02E7			MEMLO		equ $02E7
    63 = 02E0			RunVec		equ $02E0
    64 = 02E2			IniVec		equ $02E2
    65 = D40B			VCOUNT		equ $D40B
    66 = D40A			WSYNC		equ $D40A
    67 = 03FA			GINTLK		equ $03FA
    68 = D013			TRIG3		equ $D013
    69 = 0230			SDLSTL		equ $230
    70 = E456			CIOV		equ $E456
    71
    72 				; ************************ CODE ****************************
    73
    74
    75 					opt h-                     ;Disable Atari COM/XEX file headers
    76
    77 					org $a000                  ;RD5 cartridge base
    78 					opt f+                     ;Activate fill mode
    79 				load_vram
    80 A000 A0 00 BA BD 8B B1 + 	ins "rtype_vram.xex", 6
    81 					
    82 				;Cartridge initalization
    83 				;Only the minimum of the OS initialization is complete, you don't want to code here normally.
    84 B252			init    .proc
    85 B252 A9 34			lda #$34
    86 B254 8D C8 02			sta COLOR4
    87 B257 8D 1A D0			sta COLBAK
    88 B25A 60				rts
    89 					.endp ; proc init
    90 					
    91 B25B				org $b300
    92 				;Cartridge start
    93 				;Copy main code to RAM and transfer control there
    94 B300			start   .proc
    95 B300 A9 84			lda #$84
    96 B302 8D C8 02			sta COLOR4
    97 B305 8D 1A D0			sta COLBAK
    98 B308 20 14 B3			jsr copy_wait_for_cart
    99 B30B 20 2B B3			jsr copy_page_6_data
   100 B30E 20 39 B3			jsr copy_display_list
   101 B311 4C 00 A0			jmp load_vram
   102 					.endp
   103 					
   104 B314			.proc	copy_wait_for_cart
   105 B314 A0 00			ldy #0
   106 B316			@
   107 B316 B9 00 BA			lda wait_for_cart,y
   108 B319 99 00 07			sta .ADR wait_for_cart,y
   109 B31C C8				iny
   110 B31D D0 F7			bne @-
   111 B31F B9 00 BB		@	lda wait_for_cart+$100,y
   112 B322 99 00 08			sta .ADR wait_for_cart+$100,y
   113 B325 C8				iny
   114 B326 C0 1A			cpy #(.len[wait_for_cart] & 0xFF)
   115 B328 D0 F5			bne @-
   116 B32A 60				rts
   117 					.endp
   118
   119 B32B			.proc	copy_page_6_data
   120 B32B A0 00			ldy #0
   121 B32D			@
   122 B32D B9 00 BC			lda page_6_data_start,y
   123 B330 99 00 06			sta .ADR page_6_data_start,y
   124 B333 C8				iny
   125 B334 C0 50			cpy #page_6_data_end-page_6_data_start
   126 B336 D0 F5			bne @-
   127 B338 60				rts
   128 					.endp
   129
   130 B339			.proc	copy_display_list
   131 B339 A0 00			ldy #0
   132 B33B			@
   133 B33B B9 00 BE			lda display_list,y
   134 B33E 99 80 7D			sta .ADR display_list,y
   135 B341 B9 00 BF			lda display_list+$100,y
   136 B344 99 80 7E			sta .ADR display_list+$100,y
   137 B347 C8				iny
   138 B348 D0 F1			bne @-
   139 B34A			@
   140 B34A B9 00 C0			lda display_list+$200,y
   141 B34D 99 80 7F			sta .ADR display_list+$200,y
   142 B350 C8				iny
   143 B351 C0 E6			cpy #(.len[display_list] & 0xFF)
   144 B353 D0 F5			bne @-
   145 B355 A0 00			ldy #0
   146 B357			@
   147 B357 B9 00 BD			lda G15_dlist,y
   148 B35A 99 00 7C			sta .ADR G15_dlist,y
   149 B35D C8				iny
   150 B35E C0 00			cpy #.len[G15_dlist]
   151 B360 D0 F5			bne @-
   152 B362 60				rts
   153 					.endp
   154
   155 				.macro wait_cart_ready
   156 					lda #'X'
   157 				@
   158 					cmp $D5DE
   159 					; wait for cart to become ready
   160 					bne @-
   161 					.endm
   162
   163 B363 FF FF FF FF FF FF + 	.align $ba00,$FF
   164 BA00				org $ba00, $700
   165
   166 				; cmd is in Accumulator
   167 BA00			.proc wait_for_cart
   168 BA00				wait_cart_ready
Macro: WAIT_CART_READY [Source: GameBoyRT.asm]
     1 BA00 A9 58			lda #'X'
     2 BA02			@
     3 BA02 CD DE D5			cmp $D5DE
     5 BA05 D0 FB			bne @-
Source: GameBoyRT.asm
   169 					
   170 BA07 A9 1A 8D C4 02		mva #$1A COLOR0
   171 BA0C A9 16 8D C5 02		mva #$16 COLOR1
   172 BA11 A9 12 8D C6 02		mva #$12 COLOR2
   173 BA16 8D C8 02			sta COLOR4
   174 BA19 A9 00 8D C7 02		mva #$00 COLOR3 ; unused
   175
   176 BA1E 20 E9 07			jsr .ADR wait_for_vbi
   177 BA21 AD 2F 02			lda SDMCTL
   178 BA24 48				pha
   179 BA25 A9 00			lda #0
   180 BA27 8D 0E D4			sta NMIEN
   181 BA2A 8D 2F 02			sta SDMCTL
   182 BA2D 8D 00 D4			sta DMACTL
   183
   184 					; init vram (copy Pokemon data)
   185 BA30 A9 31 8D DF D5		mva #CART_CMD_INIT_VRAM $D5DF
   186 BA35				wait_cart_ready
Macro: WAIT_CART_READY [Source: GameBoyRT.asm]
     1 BA35 A9 58			lda #'X'
     2 BA37			@
     3 BA37 CD DE D5			cmp $D5DE
     5 BA3A D0 FB			bne @-
Source: GameBoyRT.asm
   187 					
   188 					; draw the initial screen
   189 BA3C A9 30 8D DF D5		mva #CART_CMD_REFRESH_SCREEN $D5DF
   190 BA41				wait_cart_ready
Macro: WAIT_CART_READY [Source: GameBoyRT.asm]
     1 BA41 A9 58			lda #'X'
     2 BA43			@
     3 BA43 CD DE D5			cmp $D5DE
     5 BA46 D0 FB			bne @-
Source: GameBoyRT.asm
   191 					
   192 BA48 A9 1E			lda #$1E
   193 BA4A 20 F3 07			jsr .ADR set_bg_colour
   194 					
   195 BA4D AD FD BF			lda $BFFD
   196 BA50 C9 04			cmp #CARTFG_START_CART
   197 BA52 D0 05			bne CartOK
   198 					; show green if boot rom still present
   199 BA54 A9 CA			lda #$CA
   200 BA56 20 F3 07			jsr .ADR set_bg_colour
   201
   202 BA59			CartOK
   203 					; no scroll on last two lines
   204 BA59 A2 80			ldx #128
   205 BA5B 8E 42 D5			stx $D542
   206 					; copy OAM / sprite data
   207 BA5E A2 11			ldx #(example_regs - example_oam)/4
   208 BA60 8E 41 D5			stx $D541 ; # of sprites
   209 BA63 A0 00			ldy #0
   210 BA65 B9 00 06		@	lda .ADR example_oam,y
   211 BA68 99 00 9E			sta GAMEBOY_OAM,y
   212 BA6B C8				iny
   213 BA6C B9 00 06			lda .ADR example_oam,y
   214 BA6F 99 00 9E			sta GAMEBOY_OAM,y
   215 BA72 C8				iny
   216 BA73 B9 00 06			lda .ADR example_oam,y
   217 BA76 99 00 9E			sta GAMEBOY_OAM,y
   218 BA79 C8				iny
   219 BA7A B9 00 06			lda .ADR example_oam,y
   220 BA7D 99 00 9E			sta GAMEBOY_OAM,y
   221 BA80 C8				iny
   222 BA81 CA				dex
   223 BA82 D0 E1			bne @-
   224 					; copy example register set
   225 BA84 A0 00			ldy #0
   226 BA86 B9 44 06		@	lda .ADR example_regs,y
   227 BA89 99 40 9F			sta GAMEBOY_REGS,y
   228 BA8C C8				iny
   229 BA8D C0 0C			cpy #12
   230 BA8F D0 F5			bne @-
   231
   232 					; each VBI will ask for a redraw
   233 BA91 A9 07			LDA #7
   234 BA93 A2 07			LDX #>(.ADR VBI)
   235 BA95 A0 FA			LDY #<(.ADR VBI)
   236 BA97 20 5C E4			JSR SETVBV
   237
   238 					; clear up old dlist
   239 BA9A A0 7F			ldy #$7F
   240 BA9C A9 00			lda #0
   241 BA9E 99 00 9C		@	sta GAMEBOY_FONT,y
   242 BAA1 88				dey
   243 BAA2 10 FA			bpl @-
   244 BAA4 A0 07			ldy #7
   245 BAA6 A9 FF		@	lda #$FF
   246 BAA8 99 00 9D			sta GAMEBOY_FONT+32*8,y
   247 BAAB A9 AA			lda #$AA
   248 BAAD 99 10 9D			sta GAMEBOY_FONT+34*8,y
   249 BAB0 A9 55			lda #$55
   250 BAB2 99 20 9D			sta GAMEBOY_FONT+36*8,y
   251 BAB5 88				dey
   252 BAB6 10 EE			bpl @-
   253 					
   254 					; Restore DMA (screen turns on at next VBlank)
   255 BAB8 68				pla
   256 BAB9 8D 2F 02			sta SDMCTL
   257 					
   258 BABC			endless
   259 					; enable dli's
   260 BABC A9 C0 8D 0E D4		mva #$C0 NMIEN
   261 BAC1 A0 00			ldy #0
   262 BAC3			anim_loop
   263 					; dlist toggler
   264 BAC3 A9 05			lda #5
   265 BAC5 CD 1F D0			cmp CONSOL
   266 BAC8 F0 08			beq @+
   267 BACA A2 7D			ldx #>(.ADR display_list)
   268 BACC A9 80			lda #<(.ADR display_list)
   269 BACE F0 06			beq @+1
   270 BAD0 D0 04			bne @+1
   271 BAD2 A2 7C		@	ldx #>(.ADR G15_dlist)
   272 BAD4 A9 00			lda #<(.ADR G15_dlist)
   273 BAD6 8E 31 02		@	stx $231
   274 BAD9 8D 30 02			sta $230
   275 					; delay
   276 BADC A9 14			lda #20
   277 BADE 20 EB 07			jsr .ADR wait_n_vbi
   278 BAE1 C8				iny
   279 BAE2 C0 08			cpy #8
   280 BAE4 D0 DD			bne anim_loop
   281 BAE6 4C BC 07			jmp .ADR endless
   282
   283 BAE9			wait_for_vbi
   284 BAE9 A9 01			lda #1
   285 BAEB			wait_n_vbi
   286 BAEB 18				clc
   287 BAEC 65 14			adc $14
   288 BAEE			@
   289 BAEE C5 14			cmp $14
   290 BAF0 D0 FC			bne @-
   291 BAF2 60				rts
   292
   293 BAF3			set_bg_colour
   294 BAF3 8D C8 02			sta COLOR4
   295 BAF6 8D 1A D0			sta COLBAK
   296 BAF9 60				rts
   297
   298 BAFA			VBI
   299 BAFA A9 0E 8D 1A D0		mva #$0E COLBAK ; white
   300 BAFF A9 30 8D DF D5		mva #CART_CMD_REFRESH_SCREEN $D5DF
   301 BB04				wait_cart_ready
Macro: WAIT_CART_READY [Source: GameBoyRT.asm]
     1 BB04 A9 58			lda #'X'
     2 BB06			@
     3 BB06 CD DE D5			cmp $D5DE
     5 BB09 D0 FB			bne @-
Source: GameBoyRT.asm
   302 BB0B AD 40 D5 8D 04 D4		mva $D540 HSCROL
   303 BB11 AD C8 02 8D 1A D0		mva COLOR4 COLBAK
   304 BB17 4C 62 E4			JMP XITVBV
   305
   306 					.endp
   307
   308 BB1A FF FF FF FF FF FF + 	.align $bc00,$FF
   309 BC00				org $bc00, $600
   310
   311 BC00			page_6_data_start
   312
   313 BC00			example_oam
   314 BC00 57 78 74 10			.byte $57, $78, $74, $10
   315 BC04 57 80 76 10			.byte $57, $80, $76, $10
   316 BC08 57 88 78 10			.byte $57, $88, $78, $10
   317 BC0C 57 90 7A 10			.byte $57, $90, $7A, $10
   318 BC10 10 9A 66 50			.byte $10, $9A, $66, $50
   319 BC14 4F 6A 7C 10			.byte $4F, $6A, $7C, $10
   320 BC18 4F 72 7E 10			.byte $4F, $72, $7E, $10
   321 BC1C 4B 0B 00 10			.byte $4B, $0B, $00, $10
   322 BC20 4B 13 02 10			.byte $4B, $13, $02, $10
   323 BC24 4B 1B 04 10			.byte $4B, $1B, $04, $10
   324 BC28 10 8C 66 50			.byte $10, $8C, $66, $50
   325 BC2C 34 06 22 10			.byte $34, $06, $22, $10
   326 BC30 34 0E 24 10			.byte $34, $0E, $24, $10
   327 BC34 47 78 6C 10			.byte $47, $78, $6C, $10
   328 BC38 47 80 6E 10			.byte $47, $80, $6E, $10
   329 BC3C 47 88 70 10			.byte $47, $88, $70, $10
   330 BC40 47 90 72 10			.byte $47, $90, $72, $10
   331
   332 BC44			example_regs
   333 BC44 85				.byte $85
   334 BC45 C1				.byte $C1
   335 BC46 00				.byte $00
   336 BC47 60				.byte $60
   337 BC48 90				.byte $90
   338 BC49 80				.byte $80
   339 BC4A C0				.byte $C0
   340 BC4B C8				.byte $C8
   341 BC4C BC				.byte $BC
   342 BC4D E4				.byte $E4
   343 BC4E 00				.byte $00
   344 BC4F 00				.byte $00
   345 BC50			page_6_data_end
   346
   347 BC50 FF FF FF FF FF FF + 	.align $bd00,$FF
   348 BD00				org $bd00,$7c00 ;Dlist
   349 BD00			G15_dlist
   350 BD00 70 70 70		:3	.byte $70
   351 BD03 5E				.byte $5E
   352 BD04 10 A0			.word $A010
   353 BD06 1E 1E 1E 1E 1E 1E + :84	.byte $1E
   354 BD5A 5E				.byte $5E
   355 BD5B 00 B0			.word $B000
   356 BD5D 1E 1E 1E 1E 1E 1E + :74	.byte $1E
   357 BDA7 41				.byte $41
   358 BDA8 00 7C			.word .ADR G15_dlist
   359
   360 BDAA F8 F8 F8 F8 F8 F8 + 	.align $be00,$F8
   361 BE00				org $be00,$7d80 ;Dlist
   362 BE00			.proc display_list
   363 BE00 70 70 70		:3	.byte $70
   364 				.rept 40
   365 				:3	.BYTE $5E, $00, $D5
   366 					.BYTE $5D, $00, $D5
   367 				.ENDR
   367 				.endr
Source: REPT
   365 BE03 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE0C 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE0F 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE18 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE1B 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE24 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE27 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE30 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE33 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE3C 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE3F 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE48 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE4B 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE54 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE57 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE60 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE63 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE6C 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE6F 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE78 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE7B 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE84 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE87 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE90 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE93 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BE9C 5D 00 D5			.BYTE $5D, $00, $D5
   365 BE9F 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BEA8 5D 00 D5			.BYTE $5D, $00, $D5
   365 BEAB 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BEB4 5D 00 D5			.BYTE $5D, $00, $D5
   365 BEB7 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BEC0 5D 00 D5			.BYTE $5D, $00, $D5
   365 BEC3 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BECC 5D 00 D5			.BYTE $5D, $00, $D5
   365 BECF 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BED8 5D 00 D5			.BYTE $5D, $00, $D5
   365 BEDB 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BEE4 5D 00 D5			.BYTE $5D, $00, $D5
   365 BEE7 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BEF0 5D 00 D5			.BYTE $5D, $00, $D5
   365 BEF3 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BEFC 5D 00 D5			.BYTE $5D, $00, $D5
   365 BEFF 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF08 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF0B 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF14 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF17 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF20 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF23 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF2C 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF2F 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF38 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF3B 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF44 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF47 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF50 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF53 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF5C 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF5F 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF68 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF6B 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF74 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF77 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF80 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF83 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF8C 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF8F 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BF98 5D 00 D5			.BYTE $5D, $00, $D5
   365 BF9B 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BFA4 5D 00 D5			.BYTE $5D, $00, $D5
   365 BFA7 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BFB0 5D 00 D5			.BYTE $5D, $00, $D5
   365 BFB3 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BFBC 5D 00 D5			.BYTE $5D, $00, $D5
   365 BFBF 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BFC8 5D 00 D5			.BYTE $5D, $00, $D5
   365 BFCB 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BFD4 5D 00 D5			.BYTE $5D, $00, $D5
   365 BFD7 5E 00 D5 5E 00 D5 + :3	.BYTE $5E, $00, $D5
   365 BFE0 5D 00 D5			.BYTE $5D, $00, $D5
Source: GameBoyRT.asm
   368 BFE3 41				.byte $41
   369 BFE4 80 7D			.word .ADR display_list
   370 					.endp
   371 					
   372 				; ************************ CARTRIDGE CONTROL BLOCK *****************
   373
   374 BFE6 FF FF FF FF FF FF + 	.align $bff8,$FF
   375 BFF8				org $bff8                 ;Cartridge control block
   376 BFF8 47 42			.byte 'G', 'B'			  ;Signal to the UNO Cart for VRAM support
   377 BFFA 00 B3			.word start               ;CARTCS
   378 BFFC 00				.byte 0                   ;CART
   379 BFFD 04				.byte CARTFG_START_CART   ;CARTFG
   380 BFFE 52 B2			.word init                ;CARTAD
